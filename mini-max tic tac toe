{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Jjioo/Jjioo/blob/main/mini-max%20tic%20tac%20toe\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Simple Mini-Max**"
      ],
      "metadata": {
        "id": "C3Zy6HGaUR71"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LAZ_-6r0KURr",
        "outputId": "503789db-253a-48cc-e133-2ce10e81ccc1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Tic Tac Toe!\n",
            "| | | |\n",
            "| | | |\n",
            "| | | |\n",
            "Choose a position (1-9): 1\n",
            "|X| | |\n",
            "| |O| |\n",
            "| | | |\n",
            "Choose a position (1-9): 7\n",
            "|X| | |\n",
            "|O|O| |\n",
            "|X| | |\n",
            "Choose a position (1-9): 9\n",
            "|X| | |\n",
            "|O|O|O|\n",
            "|X| |X|\n",
            "You lose!\n",
            "Total time taken to evaluate the game: 6.839925765991211 seconds\n",
            "1869 step\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "import random\n",
        "import time\n",
        "\n",
        "board = [' '] * 9\n",
        "human = 'X'\n",
        "ai = 'O'\n",
        "\n",
        "# global transposition table to store previously calculated scores\n",
        "transposition_table = {}\n",
        "\n",
        "def print_board():\n",
        "    print(\"|\" + board[0] + \"|\" + board[1] + \"|\" + board[2] + \"|\")\n",
        "    print(\"|\" + board[3] + \"|\" + board[4] + \"|\" + board[5] + \"|\")\n",
        "    print(\"|\" + board[6] + \"|\" + board[7] + \"|\" + board[8] + \"|\")\n",
        "\n",
        "def check_win(board, player):\n",
        "    if (board[0] == board[1] == board[2] == player) or \\\n",
        "       (board[3] == board[4] == board[5] == player) or \\\n",
        "       (board[6] == board[7] == board[8] == player) or \\\n",
        "       (board[0] == board[3] == board[6] == player) or \\\n",
        "       (board[1] == board[4] == board[7] == player) or \\\n",
        "       (board[2] == board[5] == board[8] == player) or \\\n",
        "       (board[0] == board[4] == board[8] == player) or \\\n",
        "       (board[2] == board[4] == board[6] == player):\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "def check_tie(board):\n",
        "    if ' ' not in board:\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "def get_possible_moves(board):\n",
        "    return [i for i in range(len(board)) if board[i] == ' ']\n",
        "\n",
        "def make_move(board, move, player):\n",
        "    new_board = list(board)\n",
        "    new_board[move] = player\n",
        "    return new_board\n",
        "\n",
        "def minimax(board, maximizing_player):\n",
        "    # check if the current board state is in the transposition table\n",
        "    if tuple(board) in transposition_table:\n",
        "        return transposition_table[tuple(board)]\n",
        "        #return transposition_table.get(tuple(board))\n",
        "\n",
        "    # base cases\n",
        "    if check_win(board, ai):\n",
        "        score = 10\n",
        "    elif check_win(board, human):\n",
        "        score = -10\n",
        "    elif check_tie(board):\n",
        "        score = 0\n",
        "    else:\n",
        "        # recursive case\n",
        "        if maximizing_player:\n",
        "            max_score = -math.inf\n",
        "            for move in get_possible_moves(board):\n",
        "                new_board = make_move(board, move, ai)\n",
        "                score = minimax(new_board, False)\n",
        "                max_score = max(max_score, score)\n",
        "            score = max_score\n",
        "        else:\n",
        "            min_score = math.inf\n",
        "            for move in get_possible_moves(board):\n",
        "                new_board = make_move(board, move, human)\n",
        "                score = minimax(new_board, True)\n",
        "                min_score = min(min_score, score)\n",
        "            score = min_score\n",
        "\n",
        "    # add the current board state and score to the transposition table\n",
        "    transposition_table[tuple(board)] = score\n",
        "\n",
        "    return score\n",
        "\n",
        "def ai_move():\n",
        "    bestMove = -1\n",
        "    bestScore = -1000\n",
        "    for i in range(9):\n",
        "        if board[i] == ' ':\n",
        "            board[i] = ai\n",
        "            score = minimax(board, False)\n",
        "            board[i] = ' '\n",
        "            if score > bestScore:\n",
        "                bestScore = score\n",
        "                bestMove = i\n",
        "    board[bestMove] = ai\n",
        "\n",
        "\n",
        "def human_move():\n",
        "    while True:\n",
        "        position = int(input(\"Choose a position (1-9): \")) - 1\n",
        "        if board[position] == ' ':\n",
        "            board[position] = human\n",
        "            break\n",
        "        else:\n",
        "            print(\"That position is already taken!\")\n",
        "    \n",
        "def play_game():\n",
        "    print(\"Welcome to Tic Tac Toe!\")\n",
        "    print_board()\n",
        "    start_time = time.time() # Define start_time here\n",
        "    while True:\n",
        "        human_move()\n",
        "        #print_board()\n",
        "        if check_win(board, human):\n",
        "            print(\"You win!\")\n",
        "            break\n",
        "        elif check_tie(board):\n",
        "            print(\"Tie!\")\n",
        "            break\n",
        "        ai_move()\n",
        "        print_board()\n",
        "        if check_win(board, ai):\n",
        "            print(\"You lose!\")\n",
        "            break\n",
        "    end_time = time.time()\n",
        "    print(\"Total time taken to evaluate the game:\", end_time - start_time, \"seconds\") # Use start_time here\n",
        "    print(f\"{len(transposition_table)} step\")\n",
        "\n",
        "\n",
        "play_game()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<table>\n",
        "  <tr>\n",
        "    <th>Result</th>\n",
        "    <th>Time Taken</th>\n",
        "    <th>Steps</th>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td>simple mini-max</td>\n",
        "    <td>6.839 seconds</td>\n",
        "    <td>1869</td>\n",
        "  </tr>\n",
        "</table>"
      ],
      "metadata": {
        "id": "Jrh6ndBZVfST"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**heuristique**"
      ],
      "metadata": {
        "id": "c-KnBelPZzbg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7LEiLXoLLrqd",
        "outputId": "e5718e49-5880-417e-fc4a-9272865a417a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Tic Tac Toe!\n",
            "| | | |\n",
            "| | | |\n",
            "| | | |\n",
            "Choose a position (1-9): 1\n",
            "|X| | |\n",
            "| |O| |\n",
            "| | | |\n",
            "Choose a position (1-9): 2\n",
            "|X|X|O|\n",
            "| |O| |\n",
            "| | | |\n",
            "Choose a position (1-9): 4\n",
            "|X|X|O|\n",
            "|X|O| |\n",
            "|O| | |\n",
            "You lose!\n",
            "Total time taken to evaluate the game: 7.213563442230225 seconds\n",
            "1152 step\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import math\n",
        "import random\n",
        "\n",
        "board = [' '] * 9\n",
        "human = 'X'\n",
        "ai = 'O'\n",
        "\n",
        "# global transposition table to store previously calculated scores\n",
        "transposition_table = {}\n",
        "\n",
        "\n",
        "def heuristic(board):\n",
        "    score = 0\n",
        "    # Check for potential winning moves\n",
        "    if check_potential_win(board, ai):\n",
        "        score += 1000\n",
        "    # Check for potential blocking moves\n",
        "    elif check_potential_win(board, human):\n",
        "        score += 50\n",
        "    # Check for center square\n",
        "    if board[4] == ai:\n",
        "        score += 10\n",
        "    # Check for corner squares\n",
        "    for i in [0, 2, 6, 8]:\n",
        "        if board[i] == ai:\n",
        "            score += 5\n",
        "    # Check for side squares\n",
        "    for i in [1, 3, 5, 7]:\n",
        "        if board[i] == ai:\n",
        "            score += 3\n",
        "    return score\n",
        "\n",
        "\n",
        "\n",
        "def minimax(board, maximizing_player, depth, max_depth):\n",
        "    # check if the current board state is in the transposition table\n",
        "    if tuple(board) in transposition_table:\n",
        "        return transposition_table[tuple(board)]\n",
        "        #return transposition_table.get(tuple(board))\n",
        "\n",
        "    # base cases\n",
        "    if check_win(board, ai):\n",
        "        score = 10 - depth\n",
        "    elif check_win(board, human):\n",
        "        score = depth - 10\n",
        "    elif check_tie(board):\n",
        "        score = 0\n",
        "    elif depth == max_depth:\n",
        "        score = 0\n",
        "    else:\n",
        "        # recursive case\n",
        "        if maximizing_player:\n",
        "            max_score = -math.inf\n",
        "            for move in get_possible_moves(board):\n",
        "                new_board = make_move(board, move, ai)\n",
        "                score = minimax(new_board, False, depth+1, max_depth)\n",
        "                max_score = max(max_score, score)\n",
        "            score = max_score\n",
        "        else:\n",
        "            min_score = math.inf\n",
        "            for move in get_possible_moves(board):\n",
        "                new_board = make_move(board, move, human)\n",
        "                score = minimax(new_board, True, depth+1, max_depth)\n",
        "                min_score = min(min_score, score)\n",
        "            score = min_score\n",
        "\n",
        "    # add the current board state and score to the transposition table\n",
        "    transposition_table[tuple(board)] = score\n",
        "\n",
        "    return score\n",
        "\n",
        "\n",
        "\n",
        "def check_potential_win(board, player):\n",
        "     if (board[0] == board[1] == board[2] == player) or \\\n",
        "       (board[3] == board[4] == board[5] == player) or \\\n",
        "       (board[6] == board[7] == board[8] == player) or \\\n",
        "       (board[0] == board[3] == board[6] == player) or \\\n",
        "       (board[1] == board[4] == board[7] == player) or \\\n",
        "       (board[2] == board[5] == board[8] == player) or \\\n",
        "       (board[0] == board[4] == board[8] == player) or \\\n",
        "       (board[2] == board[4] == board[6] == player):\n",
        "        return True\n",
        "     else:\n",
        "        return False\n",
        "\n",
        "\n",
        "def human_move():\n",
        "    while True:\n",
        "        try:\n",
        "            position = int(input(\"Choose a position (1-9): \")) - 1\n",
        "            if not (0 <= position <= 8):\n",
        "                raise ValueError(\"Invalid input, please enter a number between 1 and 9.\")\n",
        "            if board[position] == ' ':\n",
        "                board[position] = human\n",
        "                break\n",
        "            else:\n",
        "                print(\"Position already occupied, please choose another position.\")\n",
        "        except ValueError as error:\n",
        "            print(error)\n",
        "\n",
        "\n",
        "def ai_move():\n",
        "    bestMove = -1\n",
        "    bestScore = -1000\n",
        "    for i in range(9):\n",
        "        if board[i] == ' ':\n",
        "            board[i] = ai\n",
        "            score = minimax(board, False,0,4) + heuristic(board)\n",
        "            board[i] = ' '\n",
        "            if score > bestScore:\n",
        "                bestScore = score\n",
        "                bestMove = i\n",
        "    board[bestMove] = ai\n",
        "\n",
        "\n",
        "\n",
        "play_game()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<table>\n",
        "  <tr>\n",
        "    <th>Result</th>\n",
        "    <th>Time Taken</th>\n",
        "    <th>Steps</th>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td>with heuristique</td>\n",
        "    <td>7.2135 seconds</td>\n",
        "    <td>1152 step</td>\n",
        "  </tr>\n",
        "</table>"
      ],
      "metadata": {
        "id": "xwJyl_-9YWS5"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "VfMlcqxyZK0C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**alpha beta pruning**"
      ],
      "metadata": {
        "id": "gmcPiNo_aRMl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "import random\n",
        "import time\n",
        "\n",
        "board = [' '] * 9\n",
        "human = 'X'\n",
        "ai = 'O'\n",
        "\n",
        "# global transposition table to store previously calculated scores\n",
        "transposition_table = {}\n",
        "\n",
        "\n",
        "def heuristic(board):\n",
        "    score = 0\n",
        "    # Check for potential winning moves\n",
        "    if check_potential_win(board, ai):\n",
        "        score += 1000\n",
        "    # Check for potential blocking moves\n",
        "    elif check_potential_win(board, human):\n",
        "        score += 50\n",
        "    # Check for center square\n",
        "    if board[4] == ai:\n",
        "        score += 10\n",
        "    # Check for corner squares\n",
        "    for i in [0, 2, 6, 8]:\n",
        "        if board[i] == ai:\n",
        "            score += 5\n",
        "    # Check for side squares\n",
        "    for i in [1, 3, 5, 7]:\n",
        "        if board[i] == ai:\n",
        "            score += 3\n",
        "    return score\n",
        "\n",
        "\n",
        "def alpha_beta_minimax(board, maximizing_player, depth, max_depth, alpha, beta):\n",
        "    # check if the current board state is in the transposition table\n",
        "    if tuple(board) in transposition_table:\n",
        "        return transposition_table[tuple(board)]\n",
        "    # base cases\n",
        "    if check_win(board, ai):\n",
        "        score = 10 - depth\n",
        "    elif check_win(board, human):\n",
        "        score = depth - 10\n",
        "    elif check_tie(board):\n",
        "        score = 0\n",
        "    elif depth == max_depth:\n",
        "        score = 0\n",
        "    else:\n",
        "        # recursive case\n",
        "        if maximizing_player:\n",
        "            max_score = -math.inf\n",
        "            for move in get_possible_moves(board):\n",
        "                new_board = make_move(board, move, ai)\n",
        "                score = alpha_beta_minimax(new_board, False, depth+1, max_depth, alpha, beta)\n",
        "                max_score = max(max_score, score)\n",
        "                alpha = max(alpha, score)\n",
        "                if alpha >= beta:\n",
        "                    break\n",
        "            score = max_score\n",
        "        else:\n",
        "            min_score = math.inf\n",
        "            for move in get_possible_moves(board):\n",
        "                new_board = make_move(board, move, human)\n",
        "                score = alpha_beta_minimax(new_board, True, depth+1, max_depth, alpha, beta)\n",
        "                min_score = min(min_score, score)\n",
        "                beta = min(beta, score)\n",
        "                if alpha >= beta:\n",
        "                    break\n",
        "            score = min_score\n",
        "\n",
        "    # add the current board state and score to the transposition table\n",
        "    transposition_table[tuple(board)] = score\n",
        "\n",
        "    return score\n",
        "\n",
        "\n",
        "def ai_move():\n",
        "    start_time = time.time()\n",
        "    best_move = -1\n",
        "    best_score = -math.inf\n",
        "    alpha = -math.inf\n",
        "    beta = math.inf\n",
        "    for i in range(9):\n",
        "        if board[i] == ' ':\n",
        "            board[i] = ai\n",
        "            score = alpha_beta_minimax(board, False, 0, 3, alpha, beta) + heuristic(board)\n",
        "            board[i] = ' '\n",
        "            if score > best_score:\n",
        "                best_score = score\n",
        "                best_move = i\n",
        "            alpha = max(alpha, best_score)\n",
        "            if alpha >= beta:\n",
        "                break\n",
        "    board[best_move] = ai\n",
        "    end_time = time.time()\n",
        "    print(f\"AI's move: {best_move+1}\")\n",
        "    print(f\"Time taken: {end_time - start_time:.2f} seconds\")\n",
        "    print_board()\n",
        " \n",
        "\n",
        "play_game()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tq0FhSj2aUx6",
        "outputId": "13f917c0-7375-4075-b671-ad85ebae715d"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Welcome to Tic Tac Toe!\n",
            "| | | |\n",
            "| | | |\n",
            "| | | |\n",
            "Choose a position (1-9): 1\n",
            "AI's move: 5\n",
            "Time taken: 0.00 seconds\n",
            "|X| | |\n",
            "| |O| |\n",
            "| | | |\n",
            "|X| | |\n",
            "| |O| |\n",
            "| | | |\n",
            "Choose a position (1-9): 7\n",
            "AI's move: 4\n",
            "Time taken: 0.00 seconds\n",
            "|X| | |\n",
            "|O|O| |\n",
            "|X| | |\n",
            "|X| | |\n",
            "|O|O| |\n",
            "|X| | |\n",
            "Choose a position (1-9): 9\n",
            "AI's move: 6\n",
            "Time taken: 0.00 seconds\n",
            "|X| | |\n",
            "|O|O|O|\n",
            "|X| |X|\n",
            "|X| | |\n",
            "|O|O|O|\n",
            "|X| |X|\n",
            "You lose!\n",
            "Total time taken to evaluate the game: 7.795717477798462 seconds\n",
            "216 step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<table>\n",
        "  <tr>\n",
        "    <th>Result</th>\n",
        "    <th>Time Taken</th>\n",
        "    <th>Steps</th>\n",
        "  </tr>\n",
        "  <tr>\n",
        "    <td>with heuristique</td>\n",
        "    <td>7.795 seconds</td>\n",
        "    <td>216  step</td>\n",
        "  </tr>\n",
        "</table>"
      ],
      "metadata": {
        "id": "9dxHtoMSbs7k"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MZnwrV_dbWmr"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}